import React, { useState, useEffect } from 'react';
import { request } from './api/request'; // Import your request function
import Cookies from 'js-cookie';

function LoginPage() {
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Check if user is already logged in
  useEffect(() => {
    const token = Cookies.get('access_token');
    if (token) {
      // Redirect to dashboard or home if already logged in
      window.location.href = '/dashboard';
    }
  }, []);

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
    // Clear error when user types
    if (error) setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validation
    if (!formData.email || !formData.password) {
      setError('Please fill in all fields');
      return;
    }

    setLoading(true);
    setError('');

    try {
      // Call your backend API
      const response = await request('/login', 'POST', {
        email: formData.email,
        password: formData.password,
      });

      // The request function already stores the access_token in cookies
      console.log('Login successful:', response);

      // Redirect to dashboard or home page
      window.location.href = '/dashboard';
      
    } catch (err) {
      console.error('Login error:', err);
      // Handle different error scenarios
      const errorMessage = err.response?.data?.message || 
      err.message || 
      'Login failed. Please check your credentials.';
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4">
      <div className="max-w-md w-full bg-white p-8 rounded-lg shadow-md">
        <h1 className='text-center text-3xl font-bold text-blue-600 mb-5'>
          Login account
        </h1>
        
        {error && (
          <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
            {error}
          </div>
        )}

        <div className='flex flex-col'>
          <span className="font-medium mb-1">Email</span>
          <input 
            type="email" 
            name="email"
            placeholder='Email'
            value={formData.email}
            onChange={handl eChange}
            disabled={loading}
            className='border border-gray-300 p-2 mt-1 mb-5 rounded focus:outline-none focus:ring-2 focus:ring-blue-500'
          />
          
          <span className="font-medium mb-1">Password</span>
          <input 
            type="password"
            name="password"
            placeholder='Password'
            value={formData.password}
            onChange={handleChange}
            disabled={loading}
            className='border border-gray-300 p-2 mt-1 mb-5 rounded focus:outline-none focus:ring-2 focus:ring-blue-500'
          />
          
          <button 
            onClick={handleSubmit}
            disabled={loading}
            className='w-full bg-blue-600 hover:bg-blue-700 p-2 text-white text-2xl font-bold rounded transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center'
          >
            {loading ? (
              <>
                <svg className="animate-spin h-6 w-6 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Logging in...
              </>
            ) : (
              'Login'
            )}
          </button>
        </div>
      </div>
    </div>
  );
}

export default LoginPage;